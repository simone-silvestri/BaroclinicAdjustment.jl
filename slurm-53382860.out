┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.9.2;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA /orcd/nese/raffaele/001/ssilvest/depot/packages/CUDA/pCcGc/src/initialization.jl:82
ERROR: LoadError: ArgumentError: Cannot create a GPU grid. No CUDA-enabled GPU was detected!
Stacktrace:
 [1] LatitudeLongitudeGrid(architecture::GPU, FT::DataType; size::Tuple{Int64, Int64, Int64}, longitude::Tuple{Int64, Int64}, latitude::Tuple{Int64, Int64}, z::Tuple{Float64, Int64}, radius::Float64, topology::Tuple{DataType, DataType, DataType}, precompute_metrics::Bool, halo::Tuple{Int64, Int64, Int64})
   @ Oceananigans.Grids /orcd/nese/raffaele/001/ssilvest/depot/packages/Oceananigans/oDzSn/src/Grids/latitude_longitude_grid.jl:186
 [2] LatitudeLongitudeGrid
   @ /orcd/nese/raffaele/001/ssilvest/depot/packages/Oceananigans/oDzSn/src/Grids/latitude_longitude_grid.jl:174 [inlined]
 [3] baroclinic_adjustment_latlong(resolution::Float64, filename::String, FT::DataType; arch::GPU, horizontal_closure::Nothing, momentum_advection::Nothing, tracer_advection::WENO{4, Float64, Nothing, Nothing, Nothing, true, Nothing, WENO{3, Float64, Nothing, Nothing, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Nothing, true, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}, Centered{3, Float64, Nothing, Nothing, Nothing, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}}, buoyancy_forcing_timescale::Float64, background_νz::Float64, φ₀::Int64, stop_time::Float64)
   @ BaroclinicAdjustment /orcd/nese/raffaele/001/ssilvest/BaroclinicAdjustment.jl/src/baroclinic_adjustment_latlon.jl:53
 [4] baroclinic_adjustment_latlong
   @ /orcd/nese/raffaele/001/ssilvest/BaroclinicAdjustment.jl/src/baroclinic_adjustment_latlon.jl:38 [inlined]
 [5] top-level scope
   @ /orcd/nese/raffaele/001/ssilvest/BaroclinicAdjustment.jl/run_restoring.jl:32
in expression starting at /orcd/nese/raffaele/001/ssilvest/BaroclinicAdjustment.jl/run_restoring.jl:30
C = (Cₗ / π) ^ 3 / 8 = 0.004031441804149937
typeof(visc.ν) = Oceananigans.TurbulenceClosures.DiscreteDiffusionFunction{Nothing, Nothing, Nothing, NamedTuple{(:C, :Area), Tuple{Float64, typeof(BaroclinicAdjustment.Δ²ᵃᵃᵃ)}}, typeof(BaroclinicAdjustment.νhb_leith_final)}
C = (Cₗ / π) ^ 3 = 0.032251534433199495
typeof(visc.ν) = Oceananigans.TurbulenceClosures.DiscreteDiffusionFunction{Nothing, Nothing, Nothing, NamedTuple{(:C, :Area), Tuple{Float64, typeof(BaroclinicAdjustment.Δ²ᵃᵃᵃ)}}, typeof(BaroclinicAdjustment.νhb_leith_laplacian_final)}
C = (Cₛₘ / π) ^ 2 / 8 = 0.002564692460946675
name = 'm'
